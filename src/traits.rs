//! Common traits used throughout the crate.

use std::borrow::Cow;

use crate::Tags;
use image::Pixel;
use imageproc::definitions::Image;
use rand::Rng;

/// Something that can output an `ImageStage`, when an executor is build, you pass a collection
/// of `StageBuilders` which will then pass a per-image RNG to `build_stage`, used to generate
/// all pipelines that need to actually be executed on the image. Since the number of combinations
/// is so large, this is to prevent having to build out the entire computation graph upfront and do
/// it on-demand per-image in their own dedicated workers.
pub(crate) trait StageBuilder<P: Pixel, R: Rng> {
    /// Determines whether this stage needs to execute for an image with the given `Tags`.
    /// For instance, an image already labelled as "blurry" would not need to be blurred
    /// further.
    fn should_execute(&self, tags: &Tags) -> bool;

    /// The number of variations this stage will generate. For instance, if performing random rotations
    /// you may want to generate several sample variations.
    ///
    /// Each variation will essentially be treated as its own stage, mutually exclusive with
    /// the other stages generated by the same builder.
    fn variations(&self) -> usize;

    /// Builds out the `ImageStage` with the given `rng`, yielding a concrete transformer
    /// for an image.
    fn build_stage(&self, rng: &mut R) -> Vec<Box<dyn ImageStage<P> + Send + Sync>>;
}

/// A concrete image stage which will transform an input image in a consistent way every time.
///
/// The same image passed in should yield the same output every time.
pub(crate) trait ImageStage<P: Pixel> {
    /// Executes the stage, yielding a new output image in the same color space, and
    /// a set of new Tags to apply to the image.
    fn execute(&self, img: &Image<P>) -> (Image<P>, Tags);

    /// The name that should be appended to the image's filename, generally a shortened name
    /// of the stage and, if applicable, the degree of the transformation (e.g. `"rot_29.1_deg"`
    /// for a rotation of 29.1 degrees).
    fn name(&self) -> Cow<str>;
}
